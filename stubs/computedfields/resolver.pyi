from typing import Any, Callable, Dict, List, Optional, TypeVar

from django.db.models import Field, Model

from .graph import ComputedFieldsException as ComputedFieldsException
from .graph import ComputedModelsGraph as ComputedModelsGraph
from .helper import modelname as modelname

logger: Any
X = TypeVar("X")
Y = TypeVar("Y")

class ResolverException(ComputedFieldsException): ...

class Resolver:
    models: Any = ...
    computedfields: Any = ...
    def __init__(self) -> None: ...
    def add_model(self, sender: Any, **kwargs: Any) -> None: ...
    def add_field(self, field: Any) -> None: ...
    def seal(self) -> None: ...
    @property
    def models_with_computedfields(self) -> None: ...
    @property
    def computedfields_with_models(self) -> None: ...
    @property
    def computed_models(self) -> Dict[Model, Dict[Field[Any, Any], str]]: ...
    def extract_computed_models(self) -> Dict[Model, Dict[Field[Any, Any], str]]: ...
    def initialize(self, models_only: bool = ...) -> None: ...
    def load_maps(self, _force_recreation: bool = ...) -> None: ...
    def get_local_mro(
        self, model: Any, update_fields: Optional[Any] = ...
    ) -> List[str]: ...
    def preupdate_dependent(
        self,
        instance: Any,
        model: Optional[Any] = ...,
        update_fields: Optional[Any] = ...,
    ) -> Any: ...
    def preupdate_dependent_multi(self, instances: Any) -> None: ...
    def update_dependent(
        self,
        instance: Any,
        model: Optional[Any] = ...,
        update_fields: Optional[Any] = ...,
        old: Optional[Any] = ...,
        update_local: bool = ...,
    ) -> None: ...
    def update_dependent_multi(
        self, instances: Any, old: Optional[Any] = ..., update_local: bool = ...
    ) -> None: ...
    def bulk_updater(
        self,
        queryset: Any,
        update_fields: Any,
        return_pks: bool = ...,
        local_only: bool = ...,
    ) -> None: ...
    def compute(self, instance: Any, fieldname: Any) -> None: ...
    def get_contributing_fks(self) -> None: ...
    def computed(
        self,
        field: Field[X, Y],
        depends: Optional[List[List[Any]]] = ...,
        select_related: Optional[Any] = ...,
        prefetch_related: Optional[Any] = ...,
    ) -> Callable[[Callable[[], X]], Field[X, Y]]: ...
    def precomputed(self, *dargs: Any, **dkwargs: Any) -> None: ...
    def update_computedfields(
        self, instance: Any, update_fields: Optional[Any] = ...
    ) -> None: ...
    def has_computedfields(self, model: Any) -> None: ...
    def is_computedfield(self, model: Any, fieldname: Any) -> None: ...

active_resolver: Any
BOOT_RESOLVER = active_resolver

class _ComputedFieldsModelBase: ...
