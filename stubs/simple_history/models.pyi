from typing import Any, Dict, List, Optional

from django.db import models
from simple_history import utils as utils

from . import exceptions as exceptions
from .manager import HistoryDescriptor as HistoryDescriptor
from .signals import post_create_historical_record as post_create_historical_record
from .signals import pre_create_historical_record as pre_create_historical_record
from .utils import get_change_reason_from_object as get_change_reason_from_object

registered_models: Any

class HistoricalRecords:
    thread: Any = ...
    user_set_verbose_name: Any = ...
    user_related_name: Any = ...
    user_db_constraint: Any = ...
    table_name: Any = ...
    inherit: Any = ...
    history_id_field: Any = ...
    history_change_reason_field: Any = ...
    user_model: Any = ...
    get_user: Any = ...
    cascade_delete_history: Any = ...
    custom_model_name: Any = ...
    app: Any = ...
    user_id_field: Any = ...
    user_getter: Any = ...
    user_setter: Any = ...
    related_name: Any = ...
    use_base_model_db: Any = ...
    excluded_fields: Any = ...
    bases: Any = ...
    def __init__(
        self,
        verbose_name: Optional[Any] = ...,
        bases: Any = ...,
        user_related_name: str = ...,
        table_name: Optional[Any] = ...,
        inherit: bool = ...,
        excluded_fields: Optional[Any] = ...,
        history_id_field: Optional[Any] = ...,
        history_change_reason_field: Optional[Any] = ...,
        user_model: Optional[Any] = ...,
        get_user: Any = ...,
        cascade_delete_history: bool = ...,
        custom_model_name: Optional[Any] = ...,
        app: Optional[Any] = ...,
        history_user_id_field: Optional[Any] = ...,
        history_user_getter: Any = ...,
        history_user_setter: Any = ...,
        related_name: Optional[Any] = ...,
        use_base_model_db: bool = ...,
        user_db_constraint: bool = ...,
    ) -> None: ...
    manager_name: Any = ...
    module: Any = ...
    cls: Any = ...
    def contribute_to_class(self, cls: Any, name: Any) -> None: ...
    skip_history_when_saving: bool = ...
    def add_extra_methods(self, cls: Any) -> None: ...
    def finalize(self, sender: Any, **kwargs: Any) -> None: ...
    def get_history_model_name(self, model: Any) -> str: ...
    def create_history_model(self, model: Any, inherited: Any) -> models.Model: ...
    def fields_included(self, model: Any) -> List[models.Field[Any, Any]]: ...
    def copy_fields(self, model: Any) -> Dict[str, models.Field[Any, Any]]: ...
    def get_extra_fields(
        self, model: Any, fields: Any
    ) -> Dict[str, models.Field[Any, Any]]: ...
    def get_meta_options(self, model: Any) -> Dict[str, Any]: ...
    def post_save(
        self, instance: Any, created: Any, using: Optional[Any] = ..., **kwargs: Any
    ) -> None: ...
    def post_delete(
        self, instance: Any, using: Optional[Any] = ..., **kwargs: Any
    ) -> None: ...
    def create_historical_record(
        self, instance: Any, history_type: Any, using: Optional[Any] = ...
    ) -> None: ...
    def get_history_user(self, instance: Any) -> models.Model: ...

def transform_field(field: Any) -> None: ...

class HistoricalObjectDescriptor:
    model: Any = ...
    fields_included: Any = ...
    def __init__(self, model: Any, fields_included: Any) -> None: ...
    def __get__(self, instance: Any, owner: Any) -> models.Model: ...

class HistoricalChanges:
    def diff_against(self, old_history: Any) -> "ModelDelta": ...

class ModelChange:
    field: Any = ...
    old: Any = ...
    new: Any = ...
    def __init__(self, field_name: Any, old_value: Any, new_value: Any) -> None: ...

class ModelDelta:
    changes: Any = ...
    changed_fields: Any = ...
    old_record: Any = ...
    new_record: Any = ...
    def __init__(
        self, changes: Any, changed_fields: Any, old_record: Any, new_record: Any
    ) -> None: ...
