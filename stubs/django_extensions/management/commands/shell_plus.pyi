from typing import Any, Optional

from django.core.management.base import BaseCommand
from django_extensions.management.debug_cursor import (
    monkey_patch_cursordebugwrapper as monkey_patch_cursordebugwrapper,
)
from django_extensions.management.shells import import_objects as import_objects
from django_extensions.management.utils import signalcommand as signalcommand

def use_vi_mode(): ...
def shell_runner(flags: Any, name: Any, help: Optional[Any] = ...): ...

class Command(BaseCommand):
    help: str = ...
    extra_args: Any = ...
    tests_mode: bool = ...
    runners: Any = ...
    def __init__(self) -> None: ...
    def add_arguments(self, parser: Any) -> None: ...
    def run_from_argv(self, argv: Any): ...
    def get_ipython_arguments(self, options: Any): ...
    def get_notebook_arguments(self, options: Any): ...
    tests_imported_objects: Any = ...
    def get_imported_objects(self, options: Any): ...
    def get_kernel(self, options: Any): ...
    def load_base_kernel_spec(self, app: Any): ...
    def generate_kernel_specs(self, app: Any, ipython_arguments: Any): ...
    def run_notebookapp(
        self, app: Any, options: Any, use_kernel_specs: bool = ...
    ) -> None: ...
    def get_notebook(self, options: Any): ...
    def get_jupyterlab(self, options: Any): ...
    def get_plain(self, options: Any): ...
    def get_bpython(self, options: Any): ...
    def get_ipython(self, options: Any): ...
    def get_ptpython(self, options: Any): ...
    def get_ptipython(self, options: Any): ...
    def get_idle(self, options: Any): ...
    def set_application_name(self, options: Any): ...
    def handle(self, *args: Any, **options: Any): ...
