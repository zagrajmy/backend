from typing import Any, Callable, Dict, Optional, Union

from django.core.management import BaseCommand
from django_extensions.management.utils import signalcommand as signalcommand

ORDERING_FIELD: Any

def flatten(lst: Any, ltypes: Any = ...): ...
def all_local_fields(meta: Any): ...

class SQLDiff:
    DATA_TYPES_REVERSE_OVERRIDE: Dict[int, Union[str, Callable]] = ...
    IGNORE_MISSING_TABLES: Any = ...
    DIFF_TYPES: Any = ...
    DIFF_TEXTS: Any = ...
    SQL_FIELD_MISSING_IN_DB: Any = ...
    SQL_FIELD_MISSING_IN_MODEL: Any = ...
    SQL_FKEY_MISSING_IN_DB: Any = ...
    SQL_INDEX_MISSING_IN_DB: Any = ...
    SQL_INDEX_MISSING_IN_MODEL: Any = ...
    SQL_UNIQUE_MISSING_IN_DB: Any = ...
    SQL_UNIQUE_MISSING_IN_MODEL: Any = ...
    SQL_FIELD_TYPE_DIFFER: Any = ...
    SQL_FIELD_PARAMETER_DIFFER: Any = ...
    SQL_NOTNULL_DIFFER: Any = ...
    SQL_ERROR: Any = ...
    SQL_COMMENT: Any = ...
    SQL_TABLE_MISSING_IN_DB: Any = ...
    SQL_TABLE_MISSING_IN_MODEL: Any = ...
    can_detect_notnull_differ: bool = ...
    can_detect_unsigned_differ: bool = ...
    unsigned_suffix: Optional[str] = ...
    has_differences: Any = ...
    app_models: Any = ...
    options: Any = ...
    dense: Any = ...
    stdout: Any = ...
    stderr: Any = ...
    introspection: Any = ...
    differences: Any = ...
    unknown_db_fields: Any = ...
    new_db_fields: Any = ...
    null: Any = ...
    unsigned: Any = ...
    DIFF_SQL: Any = ...
    def __init__(
        self, app_models: Any, options: Any, stdout: Any, stderr: Any
    ) -> None: ...
    cursor: Any = ...
    django_tables: Any = ...
    db_tables: Any = ...
    def load(self) -> None: ...
    def load_null(self) -> None: ...
    def load_unsigned(self) -> None: ...
    def add_app_model_marker(self, app_label: Any, model_name: Any) -> None: ...
    def add_difference(self, diff_type: Any, *args: Any) -> None: ...
    def get_data_types_reverse_override(self) -> Dict[int, Union[str, Callable]]: ...
    def format_field_names(self, field_names: Any): ...
    def sql_to_dict(self, query: Any, param: Any): ...
    def get_field_model_type(self, field: Any): ...
    def get_field_db_type_kwargs(
        self,
        current_kwargs: Any,
        description: Any,
        field: Optional[Any] = ...,
        table_name: Optional[Any] = ...,
        reverse_type: Optional[Any] = ...,
    ): ...
    def get_field_db_type(
        self,
        description: Any,
        field: Optional[Any] = ...,
        table_name: Optional[Any] = ...,
    ): ...
    def get_field_db_type_lookup(self, type_code: Any) -> None: ...
    def get_field_class(self, class_path: Any): ...
    def get_field_db_nullable(self, field: Any, table_name: Any): ...
    def strip_parameters(self, field_type: Any): ...
    def expand_together(self, together: Any, meta: Any): ...
    def find_unique_missing_in_db(
        self,
        meta: Any,
        table_indexes: Any,
        table_constraints: Any,
        table_name: Any,
        skip_list: Optional[Any] = ...,
    ) -> None: ...
    def find_unique_missing_in_model(
        self, meta: Any, table_indexes: Any, table_constraints: Any, table_name: Any
    ) -> None: ...
    def find_index_missing_in_db(
        self, meta: Any, table_indexes: Any, table_constraints: Any, table_name: Any
    ) -> None: ...
    def find_index_missing_in_model(
        self, meta: Any, table_indexes: Any, table_constraints: Any, table_name: Any
    ) -> None: ...
    def find_field_missing_in_model(
        self, fieldmap: Any, table_description: Any, table_name: Any
    ) -> None: ...
    def find_field_missing_in_db(
        self, fieldmap: Any, table_description: Any, table_name: Any
    ) -> None: ...
    def find_field_type_differ(
        self,
        meta: Any,
        table_description: Any,
        table_name: Any,
        func: Optional[Any] = ...,
    ) -> None: ...
    def find_field_parameter_differ(
        self,
        meta: Any,
        table_description: Any,
        table_name: Any,
        func: Optional[Any] = ...,
    ) -> None: ...
    def find_field_notnull_differ(
        self, meta: Any, table_description: Any, table_name: Any
    ) -> None: ...
    def get_constraints(self, cursor: Any, table_name: Any, introspection: Any): ...
    def find_differences(self) -> None: ...
    def print_diff(self, style: Any = ...) -> None: ...
    def print_diff_text(self, style: Any) -> None: ...
    def print_diff_sql(self, style: Any) -> None: ...

class GenericSQLDiff(SQLDiff):
    can_detect_notnull_differ: bool = ...
    can_detect_unsigned_differ: bool = ...
    def load_null(self) -> None: ...
    def load_unsigned(self) -> None: ...

class MySQLDiff(SQLDiff):
    can_detect_notnull_differ: bool = ...
    can_detect_unsigned_differ: bool = ...
    unsigned_suffix: str = ...
    auto_increment: Any = ...
    def load(self) -> None: ...
    def format_field_names(self, field_names: Any): ...
    def load_null(self) -> None: ...
    def load_unsigned(self) -> None: ...
    def load_auto_increment(self) -> None: ...
    def get_field_db_type(
        self,
        description: Any,
        field: Optional[Any] = ...,
        table_name: Optional[Any] = ...,
    ): ...
    def find_index_missing_in_model(
        self, meta: Any, table_indexes: Any, table_constraints: Any, table_name: Any
    ) -> None: ...
    def find_unique_missing_in_db(
        self,
        meta: Any,
        table_indexes: Any,
        table_constraints: Any,
        table_name: Any,
        skip_list: Optional[Any] = ...,
    ) -> None: ...

class SqliteSQLDiff(SQLDiff):
    can_detect_notnull_differ: bool = ...
    can_detect_unsigned_differ: bool = ...
    def load_null(self) -> None: ...
    def load_unsigned(self) -> None: ...
    def find_unique_missing_in_db(
        self,
        meta: Any,
        table_indexes: Any,
        table_constraints: Any,
        table_name: Any,
        skip_list: Optional[Any] = ...,
    ) -> None: ...
    def find_index_missing_in_db(
        self, meta: Any, table_indexes: Any, table_constraints: Any, table_name: Any
    ) -> None: ...
    def find_index_missing_in_model(
        self, meta: Any, table_indexes: Any, table_constraints: Any, table_name: Any
    ) -> None: ...
    def get_field_db_type(
        self,
        description: Any,
        field: Optional[Any] = ...,
        table_name: Optional[Any] = ...,
    ): ...

class PostgresqlSQLDiff(SQLDiff):
    can_detect_notnull_differ: bool = ...
    can_detect_unsigned_differ: bool = ...
    DATA_TYPES_REVERSE_NAME: Any = ...
    SQL_LOAD_CONSTRAINTS: str = ...
    SQL_LOAD_NULL: str = ...
    SQL_FIELD_TYPE_DIFFER: Any = ...
    SQL_FIELD_PARAMETER_DIFFER: Any = ...
    SQL_NOTNULL_DIFFER: Any = ...
    check_constraints: Any = ...
    def load(self) -> None: ...
    def load_null(self) -> None: ...
    def load_unsigned(self) -> None: ...
    def load_constraints(self) -> None: ...
    def get_data_type_arrayfield(self, base_field: Any): ...
    def get_data_types_reverse_override(self): ...
    def get_constraints(self, cursor: Any, table_name: Any, introspection: Any): ...
    def get_field_db_type(
        self,
        description: Any,
        field: Optional[Any] = ...,
        table_name: Optional[Any] = ...,
    ): ...
    def get_field_db_type_lookup(self, type_code: Any): ...

DATABASE_SQLDIFF_CLASSES: Any

class Command(BaseCommand):
    help: str = ...
    output_transaction: bool = ...
    def add_arguments(self, parser: Any) -> None: ...
    exit_code: int = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def handle(self, *args: Any, **options: Any) -> None: ...
    def execute(self, *args: Any, **options: Any) -> None: ...
    def run_from_argv(self, argv: Any) -> None: ...
