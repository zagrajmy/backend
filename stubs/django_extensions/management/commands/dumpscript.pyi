from typing import Any, Optional

from django.core.management.base import BaseCommand
from django_extensions.management.utils import signalcommand as signalcommand

def orm_item_locator(orm_obj: Any): ...

class Command(BaseCommand):
    help: str = ...
    def add_arguments(self, parser: Any) -> None: ...
    def handle(self, *args: Any, **options: Any) -> None: ...

def get_models(app_labels: Any): ...

class Code:
    indent: Any = ...
    stdout: Any = ...
    stderr: Any = ...
    def __init__(
        self,
        indent: int = ...,
        stdout: Optional[Any] = ...,
        stderr: Optional[Any] = ...,
    ) -> None: ...
    def get_import_lines(self): ...
    import_lines: Any = ...

class ModelCode(Code):
    model: Any = ...
    context: Any = ...
    options: Any = ...
    instances: Any = ...
    def __init__(
        self,
        model: Any,
        context: Optional[Any] = ...,
        stdout: Optional[Any] = ...,
        stderr: Optional[Any] = ...,
        options: Optional[Any] = ...,
    ) -> None: ...
    def get_imports(self): ...
    imports: Any = ...
    def get_lines(self): ...
    lines: Any = ...

class InstanceCode(Code):
    imports: Any = ...
    options: Any = ...
    instance: Any = ...
    model: Any = ...
    context: Any = ...
    variable_name: Any = ...
    skip_me: Any = ...
    instantiated: bool = ...
    waiting_list: Any = ...
    many_to_many_waiting_list: Any = ...
    def __init__(
        self,
        instance: Any,
        id: Any,
        context: Optional[Any] = ...,
        stdout: Optional[Any] = ...,
        stderr: Optional[Any] = ...,
        options: Optional[Any] = ...,
    ) -> None: ...
    def get_lines(self, force: bool = ...): ...
    lines: Any = ...
    def skip(self): ...
    def instantiate(self): ...
    def get_waiting_list(self, force: bool = ...): ...
    def get_many_to_many_lines(self, force: bool = ...): ...

class Script(Code):
    imports: Any = ...
    models: Any = ...
    context: Any = ...
    options: Any = ...
    def __init__(
        self,
        models: Any,
        context: Optional[Any] = ...,
        stdout: Optional[Any] = ...,
        stderr: Optional[Any] = ...,
        options: Optional[Any] = ...,
    ) -> None: ...
    def get_lines(self): ...
    lines: Any = ...
    FILE_HEADER: Any = ...

def flatten_blocks(lines: Any, num_indents: int = ...): ...
def get_attribute_value(
    item: Any, field: Any, context: Any, force: bool = ..., skip_autofield: bool = ...
): ...
def make_clean_dict(the_dict: Any): ...
def check_dependencies(model: Any, model_queue: Any, avaliable_models: Any): ...

class SkipValue(Exception): ...
class DoLater(Exception): ...

class StrToCodeChanger:
    repr: Any = ...
    def __init__(self, string: Any) -> None: ...
