from abc import ABCMeta, abstractmethod
from typing import Any, Dict, List, Optional, Tuple

class BaseCR(metaclass=ABCMeta):
    @classmethod
    def get_app_name_and_model(cls: Any, full_model_path: str) -> Tuple[str, str]: ...
    @abstractmethod
    def resolve_collisions(self, namespace: Dict[str, List[str]]) -> Dict[str, str]: ...

class LegacyCR(BaseCR):
    def resolve_collisions(self, namespace: Any): ...

class AppsOrderCR(LegacyCR, metaclass=ABCMeta):
    APP_PRIORITIES: List[str] = ...
    def resolve_collisions(self, namespace: Any): ...

class InstalledAppsOrderCR(AppsOrderCR):
    @property
    def APP_PRIORITIES(self): ...

class PathBasedCR(LegacyCR, metaclass=ABCMeta):
    @abstractmethod
    def transform_import(self, module_path: str) -> str: ...
    def resolve_collisions(self, namespace: Any): ...

class FullPathCR(PathBasedCR):
    def transform_import(self, module_path: Any): ...

class AppNameCR(PathBasedCR, metaclass=ABCMeta):
    MODIFICATION_STRING: Optional[str] = ...
    def transform_import(self, module_path: Any): ...

class AppNamePrefixCR(AppNameCR):
    MODIFICATION_STRING: str = ...

class AppNameSuffixCR(AppNameCR):
    MODIFICATION_STRING: str = ...

class AppNamePrefixCustomOrderCR(AppNamePrefixCR, InstalledAppsOrderCR): ...
class AppNameSuffixCustomOrderCR(AppNameSuffixCR, InstalledAppsOrderCR): ...
class FullPathCustomOrderCR(FullPathCR, InstalledAppsOrderCR): ...

class AppLabelCR(PathBasedCR, metaclass=ABCMeta):
    MODIFICATION_STRING: Optional[str] = ...
    def transform_import(self, module_path: Any): ...

class AppLabelPrefixCR(AppLabelCR):
    MODIFICATION_STRING: str = ...

class AppLabelSuffixCR(AppLabelCR):
    MODIFICATION_STRING: str = ...

class CollisionResolvingRunner:
    def __init__(self) -> None: ...
    def run_collision_resolver(
        self, models_to_import: Dict[str, List[str]]
    ) -> Dict[str, List[Tuple[str, str]]]: ...
