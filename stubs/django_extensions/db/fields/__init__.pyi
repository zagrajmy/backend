from typing import Any, Generic, Iterator, Optional, TypeVar

from django.db.models import CharField, DateTimeField, Model, QuerySet, SlugField

HAS_UUID: bool
HAS_SHORT_UUID: bool
MAX_UNIQUE_QUERY_ATTEMPTS: Any

M = TypeVar("M", bound=Model)
X = TypeVar("X", bound=Model)
# __set__ value type
_ST = TypeVar("_ST")
# __get__ return type
_GT = TypeVar("_GT")

class UniqueFieldMixin(Generic[X]):
    def check_is_bool(self, attrname: Any) -> None: ...
    def get_queryset(self, model_cls: M, slug_field: Any) -> QuerySet[M]: ...
    def find_unique(
        self, model_instance: Any, field: Any, iterator: Iterator[X], *args: Any
    ) -> X: ...

class AutoSlugField(UniqueFieldMixin[X], SlugField[_ST, _GT]):
    slugify_function: Any = ...
    separator: Any = ...
    overwrite: Any = ...
    overwrite_on_add: Any = ...
    allow_duplicates: Any = ...
    max_unique_query_attempts: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    @staticmethod
    def slugify_func(content: Any, slugify_function: Any) -> str: ...
    def slug_generator(self, original_slug: Any, start: Any) -> None: ...
    slug_len: Any = ...
    def create_slug(self, model_instance: Any, add: Any) -> X: ...
    def get_slug_fields(self, model_instance: Any, lookup_value: Any) -> str: ...
    def pre_save(self, model_instance: Any, add: Any) -> str: ...
    def get_internal_type(self) -> str: ...
    def deconstruct(self) -> Any: ...

class RandomCharField(UniqueFieldMixin[X], CharField[_ST, _GT]):
    length: Any = ...
    lowercase: Any = ...
    uppercase: Any = ...
    include_digits: Any = ...
    include_alpha: Any = ...
    include_punctuation: Any = ...
    max_unique_query_attempts: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def random_char_generator(self, chars: Any) -> None: ...
    def in_unique_together(self, model_instance: Any) -> Any: ...
    def pre_save(self, model_instance: Any, add: Any) -> Any: ...
    def internal_type(self) -> Any: ...
    def deconstruct(self) -> Any: ...

class CreationDateTimeField(DateTimeField[_ST, _GT]):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def get_internal_type(self) -> Any: ...
    def deconstruct(self) -> Any: ...

class ModificationDateTimeField(CreationDateTimeField[_ST, _GT]):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def get_internal_type(self) -> Any: ...
    def deconstruct(self) -> Any: ...
    def pre_save(self, model_instance: Any, add: Any) -> Any: ...

class UUIDVersionError(Exception): ...

class UUIDFieldMixin:
    DEFAULT_MAX_LENGTH: int = ...
    empty_strings_allowed: bool = ...
    auto: Any = ...
    version: Any = ...
    node: Any = ...
    clock_seq: Any = ...
    namespace: Any = ...
    uuid_name: Any = ...
    def __init__(
        self,
        verbose_name: Optional[Any] = ...,
        name: Optional[Any] = ...,
        auto: bool = ...,
        version: int = ...,
        node: Optional[Any] = ...,
        clock_seq: Optional[Any] = ...,
        namespace: Optional[Any] = ...,
        uuid_name: Optional[Any] = ...,
        *args: Any,
        **kwargs: Any,
    ) -> None: ...
    def create_uuid(self) -> Any: ...
    def pre_save(self, model_instance: Any, add: Any) -> Any: ...
    def formfield(self, **kwargs: Any) -> Any: ...
    def deconstruct(self) -> Any: ...

class ShortUUIDField(UUIDFieldMixin, CharField[_ST, _GT]):
    DEFAULT_MAX_LENGTH: int = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def create_uuid(self) -> Any: ...
